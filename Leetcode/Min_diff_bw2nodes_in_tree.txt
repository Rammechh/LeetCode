Given the root of a Binary Search Tree (BST), return the minimum difference between the values of any two different nodes in the tree.

 

Example 1:


Input: root = [4,2,6,1,3]
Output: 1
Example 2:


Input: root = [1,0,48,null,null,12,49]
Output: 1
 

Constraints:

The number of nodes in the tree is in the range [2, 100].
0 <= Node.val <= 105

------------------------------------------------------Solution------------------------------------------------------

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def minDiffInBST(self, root: TreeNode) -> int:
        def BST(node):
            if node!=None:
                BST(node.left)
                BST(node.right)
                nodes.append(node.val)
        nodes=[]
        m=100000
        BST(root)
        leng=len(nodes)
        nodes.sort()
        for i in range(leng-1):
            m = min(m , nodes[i+1] - nodes[i] )
            #for j in range(leng-1):
                #if nodes[i+1]-nodes[i]<=m:
                    #m=nodes[i+1]-nodes[i]
        return m
