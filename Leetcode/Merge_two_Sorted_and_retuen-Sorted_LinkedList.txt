Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.

 

Example 1:


Input: l1 = [1,2,4], l2 = [1,3,4]
Output: [1,1,2,3,4,4]
Example 2:

Input: l1 = [], l2 = []
Output: []
Example 3:

Input: l1 = [], l2 = [0]
Output: [0]

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:
        s1=[]
        s2=[]
        while l1 or l2:
            if l1:
                s1.append(l1.val)
                l1=l1.next
            if l2:
                s2.append(l2.val)
                l2=l2.next
        s1.extend(s2)
        s1.sort()
        x=None
        for i in s1[::-1]:
            newNode=ListNode(i)
            newNode.next=x
            x=newNode
        return x