148. Sort List	

Given the head of a linked list, return the list after sorting it in ascending order.

Follow up: Can you sort the linked list in O(n logn) time and O(1) memory (i.e. constant space)?

 

Example 1:


Input: head = [4,2,1,3]
Output: [1,2,3,4]
Example 2:


Input: head = [-1,5,3,4,0]
Output: [-1,0,3,4,5]
Example 3:

Input: head = []
Output: []

-----------------------------------------------------Solution--------------------------------------------------------------------
1)# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def sortList(self, head: ListNode) -> ListNode:
        sort=[]
        while head:
            sort.append(head.val)
            head=head.next
        sort.sort()
        x=head=ListNode(0)
        for i in sort:
            newNode=ListNode(i)
            head.next=newNode
            head=head.next
        return x.next
		
2)Fully optimzed (Runtime: 104 ms, faster than 100.00% of Python3 online submissions for Sort List.
Memory Usage: 29.7 MB, less than 99.87% of Python3 online submissions for Sort List.)

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def sortList(self, head: ListNode) -> ListNode:
        sort=[]
        while head:
            sort.append(head.val)
            head=head.next
        sort.sort()
        
        return ListNode(",".join(map(str, sort)))

3)# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def sortList(self, head: ListNode) -> ListNode:
        sort=[]
        xhead=head
        while head:
            sort.append(head.val)
            head=head.next
        sort.sort()
        cur=xhead
        for i in sort:
            cur.val=i
            cur=cur.next
        return xhead
----------------------------------Reverse-------------------------------------------
def linkedListReverse(head):
	prev = None
	current = head
	while(current is not None):
		next = current.next
		current.next = prev
		prev = current
		current = next
	head = prev
	return head