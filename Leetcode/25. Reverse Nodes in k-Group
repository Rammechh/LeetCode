Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

Follow up:

Could you solve the problem in O(1) extra memory space?
You may not alter the values in the list's nodes, only nodes itself may be changed.
 

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]
Example 2:


Input: head = [1,2,3,4,5], k = 3
Output: [3,2,1,4,5]
Example 3:

Input: head = [1,2,3,4,5], k = 1
Output: [1,2,3,4,5]
Example 4:

Input: head = [1], k = 1
Output: [1]



------------------------------------------------solution-------------------------------------------
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseKGroup(self, head: ListNode, k: int) -> ListNode:
        lis=[]
        lis.append(0)
        rev=[]
        while head!=None:
            lis.append(head.val)
            head=head.next
        for i in range(0,len(lis),k):
            if i+k>=len(lis):
                for r in range(i+1,len(lis),1):
                    rev.append(lis[r])
                break
            for j in range((i+k),i,-1):
                rev.append(lis[j])
        print(rev)
        x=None
        for i in rev[::-1]:
            newNode=ListNode(i)
            newNode.next=x
            x=newNode
        return x