Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.

 

Example 1:


Input: head = [1,2,3,3,4,4,5]
Output: [1,2,5]
Example 2:


Input: head = [1,1,1,2,3]
Output: [2,3]



---------------------------------Solution----------------------------------------
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def deleteDuplicates(self, head: ListNode) -> ListNode:
        nonDup=[]
        while head!=None:
            nonDup.append(head.val)
            head=head.next
        x=None
        for i in nonDup[::-1]:
            if nonDup.count(i)<2:
                newNode=ListNode(i)
                newNode.next=x
                x=newNode
        return x