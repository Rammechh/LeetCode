#206. Reverse Linked List(https://www.youtube.com/watch?v=XDO6I8jxHtA)


Given the head of a singly linked list, reverse the list, and return the reversed list.

 

Example 1:


Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]
Example 2:


Input: head = [1,2]
Output: [2,1]
Example 3:

Input: head = []
Output: []

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        if head ==None:
            return
        if head.next==None:
            return head
        p1=head
        p2=p1.next
        p3=p2.next
        p2.next=p1
        p1.next=None
        while p3 is not None:
            p1=p2
            p2=p3
            p3=p3.next
            p2.next=p1
        return p2
		
2)recurrsion
def reversePrint(head):
    while head is None:
        return
    reversePrint(head.next)
    print(head.data)

3)
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        prev=None
        while head:
            temp=head
            head=head.next
            temp.next=prev
            prev=temp
        return prev

4)# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        prev=None
        while head:
            temp=head
            head=head.next
            temp.next=prev
            prev=temp
        head=prev
        return head